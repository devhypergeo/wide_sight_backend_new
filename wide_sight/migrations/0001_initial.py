# Generated by Django 3.1.7 on 2021-03-19 09:36

import datetime
import dirtyfields.dirtyfields
import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion
import uuid
import wide_sight.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='image_object_types',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(blank=True, max_length=20)),
                ('for_type', models.IntegerField(choices=[(1, 'tag'), (2, 'map spot'), (3, 'stereo interpretation'), (4, 'visual intersection')])),
                ('color', models.CharField(blank=True, max_length=20)),
            ],
            options={
                'verbose_name': 'Image_object_type',
                'verbose_name_plural': 'Image_object_types',
            },
        ),
        migrations.CreateModel(
            name='sequences',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='unique alphanumeric identifier', primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='sequence title string', max_length=50)),
                ('geom', django.contrib.gis.db.models.fields.MultiPointField(blank=True, help_text='geometry containing all related panorama positions', null=True, srid=4326)),
                ('shooting_data', models.DateField(blank=True, default=datetime.date.today, help_text='date of shooting (default today)')),
                ('height_from_ground', models.FloatField(blank=True, default=2, help_text='height from the ground of the camera. can be overidden in single panorama setting', null=True)),
                ('note', models.CharField(blank=True, help_text='free notes about the sequence', max_length=50)),
            ],
            options={
                'verbose_name': 'Sequence',
                'verbose_name_plural': 'Sequences',
                'ordering': ['shooting_data'],
            },
        ),
        migrations.CreateModel(
            name='panoramas',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='unique alphanumeric identifier', primary_key=True, serialize=False)),
                ('eqimage', models.ImageField(help_text='equirectangular image path', upload_to=wide_sight.models.panoramas.upload_img)),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='geometry location of the panorama', null=True, srid=4326)),
                ('lon', models.FloatField(blank=True, help_text='decimal longitude of the panorama', null=True)),
                ('lat', models.FloatField(blank=True, help_text='decimal latitude of the panorama', null=True)),
                ('utm_x', models.FloatField(blank=True, help_text='UTM projected coordinate x in meters', null=True)),
                ('utm_y', models.FloatField(blank=True, help_text='UTM projected coordinate y in meters', null=True)),
                ('utm_code', models.CharField(blank=True, help_text='UTM zone code', max_length=3)),
                ('utm_srid', models.IntegerField(blank=True, help_text='UTM srid code', null=True)),
                ('elevation', models.FloatField(blank=True, help_text='elevation over the sealevel of the panorama location', null=True)),
                ('accurancy', models.FloatField(blank=True, help_text='accurancy of theh panorama location', null=True)),
                ('heading', models.FloatField(blank=True, help_text='heading of the camera expressed in clockwise decimal degrees from north', null=True)),
                ('pitch', models.FloatField(blank=True, help_text='pitch angle of the camera', null=True)),
                ('roll', models.FloatField(blank=True, help_text='roll angle of the camera', null=True)),
                ('fov', models.FloatField(blank=True, help_text='Field of view of the camera', null=True)),
                ('camera_prod', models.CharField(blank=True, help_text='Camera producer (from EXIF)', max_length=50, null=True)),
                ('camera_model', models.CharField(blank=True, help_text='Camera model (from EXIF)', max_length=50, null=True)),
                ('address', models.CharField(blank=True, help_text='Geolocated address (not yet implemented)', max_length=150)),
                ('note', models.CharField(blank=True, help_text='Free text annotation on panorama', max_length=50)),
                ('shooting_time', models.DateTimeField(blank=True, default=datetime.datetime.now, help_text='Datetime instant of panorama shot', null=True)),
                ('height_correction', models.FloatField(blank=True, help_text='Correction of sequence height from ground', null=True)),
                ('sequence', models.ForeignKey(help_text='sequence id to which panorama belongs', on_delete=django.db.models.deletion.CASCADE, to='wide_sight.sequences')),
            ],
            options={
                'verbose_name': 'Panorama',
                'verbose_name_plural': 'Panoramas',
                'ordering': ['shooting_time'],
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
        migrations.CreateModel(
            name='image_objects',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='unique alphanumeric identifier', primary_key=True, serialize=False)),
                ('type', models.IntegerField(choices=[(1, 'tag'), (2, 'map spot'), (3, 'stereo interpretation'), (4, 'visual intersection')], help_text='Application image object type (1:tag, 2:map_spot, 3:stereo interpretation, 4:visual intersection, ... more will come)')),
                ('img_lat', models.FloatField(blank=True, help_text='image object latitude on equirectangular panorama image', null=True)),
                ('img_lon', models.FloatField(blank=True, help_text='image object longitude on equirectangular panorama image', null=True)),
                ('geom_on_panorama', models.TextField(blank=True, help_text='geometry trace of image object as array of longitude/latitude points on equirectangular panorama image')),
                ('width', models.IntegerField(blank=True, help_text='graphic width of image object', null=True)),
                ('height', models.IntegerField(blank=True, help_text='height from ground of geo-located image object', null=True)),
                ('lon', models.FloatField(blank=True, help_text='longitude of geo-located image object', null=True)),
                ('lat', models.FloatField(blank=True, help_text='latitude of geo-located image object', null=True)),
                ('utm_x', models.FloatField(blank=True, help_text='UTM projected x of geo-located image object', null=True)),
                ('utm_y', models.FloatField(blank=True, help_text='UTM projected y of geo-located image object', null=True)),
                ('utm_code', models.CharField(blank=True, help_text='UTM zone code related to geo-located image object position', max_length=3)),
                ('utm_srid', models.IntegerField(blank=True, help_text='UTM srid related to geo-located image object position', null=True)),
                ('elevation', models.FloatField(blank=True, help_text='elevation from sea level of geo-located image object', null=True)),
                ('accurancy', models.FloatField(blank=True, help_text='accurancy of geo-located image object position', null=True)),
                ('note', models.CharField(blank=True, help_text='User textual notes on image object', max_length=50)),
                ('user_data', models.TextField(blank=True, help_text='json field structured user data related to image object (not yet implemented)')),
                ('sampling_data', models.DateTimeField(blank=True, default=datetime.datetime.now, help_text='Datetime instant of image object recognition', null=True)),
                ('geom', django.contrib.gis.db.models.fields.PointField(blank=True, geography=True, help_text='Point Geometry of geo-located image object', null=True, srid=4326)),
                ('match', models.ManyToManyField(blank=True, help_text='matching id of other related image objects (not yet used)', related_name='_image_objects_match_+', to='wide_sight.image_objects')),
                ('panorama', models.ForeignKey(help_text='Panorama id to which image object belongs ', on_delete=django.db.models.deletion.CASCADE, to='wide_sight.panoramas')),
                ('sample_type', models.ForeignKey(blank=True, help_text='User-defined Image object type', null=True, on_delete=django.db.models.deletion.PROTECT, to='wide_sight.image_object_types')),
            ],
            options={
                'verbose_name': 'Image_object',
                'verbose_name_plural': 'Image_objects',
            },
            bases=(dirtyfields.dirtyfields.DirtyFieldsMixin, models.Model),
        ),
    ]
